<?php

/**
 * @file
 * Module file for dev utility module.
 */

/**
 * Implements hook_menu().
 */
function ffunctions_devel_menu() {
  $items = array();
  // @todo: Make these %ffunctions_devel_entity_type_load/%ffunction_devel_entity__load?
  $items['admin/ffunctions/devel/%/%'] = array(
    // @todo: title callback based on entity type
    'title' => 'Devel Load',
    'page callback' => 'ffunctions_devel_load_page',
    'page arguments' => array(3, 4),
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Wrapper around entity_load.
 * @todo: this is only necessary if we use this for loading from the menu.
 *
 * @param string $entity_type
 *  The entity type to load, e.g. node or user.
 * @param array $entity_ids
 *  An array of entity IDs.
 *
 * @return
 *   An array of entity objects indexed by their ids. When no results are
 *   found, an empty array is returned.
 *
 * @see entity_load().
 */
function ffunctions_devel_load($entity_type, $entity_ids) {
  return entity_load($entity_type, $entity_ids);
}

/**
 * Build a devel loaded object page.
 *
 * @see devel_load_object().
 */
function ffunctions_devel_load_page($entity_type, $entity_ids) {
  module_load_include('pages.inc', 'devel');
  if (!is_array($entity_ids)) {
    $entity_ids = explode(',', $entity_ids);
  }
  $entities = ffunctions_devel_load($entity_type, $entity_ids);
  return devel_load_object($entity_type, reset($entities));
}

/**
 * Set up the configuration for local development.
 */
function ffunctions_devel_setup_dev_site() {
  ffunctions_devel_disable_modules();
  ffunctions_devel_enable_modules();
  ffunctions_devel_variable_set();
  ffunctions_devel_change_permissions();
  ffunctions_devel_set_user_passwords();
  drupal_flush_all_caches();
}

/**
 * Invoke a hook and its alter.
 *
 * @param string $hook
 *  The name of the hook to invoke.
 *
 * @return array
 *  The compiled data from the hook that was invoked.
 */
function ffunctions_devel_invoke_hook($hook) {
  $data = module_invoke_all($hook);
  drupal_alter($hook, $data);
  return $data;
}


/** Functions for setting up dev site **/

/**
 * Get a list of modules to enable and do it.
 */
function ffunctions_devel_enable_modules() {
  $modules = ffunctions_devel_invoke_hook(__FUNCTION__);
  if (!empty($modules)) {
    module_enable($modules);
    devel_set_message(t('Enabled modules @modules', array('@modules' => implode(', ', $modules))), 'ok');
  }
}

/**
 * Get a list of modules to disable and do it.
 */
function ffunctions_devel_disable_modules() {
  $modules = ffunctions_devel_invoke_hook(__FUNCTION__);
  if (!empty($modules)) {
    module_disable($modules);
    devel_set_message(t('Disabled modules @modules', array('@modules' => implode(', ', $modules))), 'ok');
  }
}

/**
 * Set variable values.
 */
function ffunctions_devel_variable_set() {
  $vars = ffunctions_devel_invoke_hook(__FUNCTION__);
  if (!empty($vars)) {
    foreach ($vars as $var => $value) {
      variable_set($var, $value);
      $message_value = (is_array($value) || is_object($value)) ? print_r($value, TRUE) : $value;
      devel_set_message(t('Set variable @variable to @value', array('@variable' => $var, '@value' => $message_value)), 'ok');
    }
  }
}

/**
 * Get a list of permissions to add/revoke.
 */
function ffunctions_devel_change_permissions() {
  $perms = ffunctions_devel_invoke_hook(__FUNCTION__);

  // Write the updated permissions.
  foreach (user_roles() as $rid => $role) {
    if (isset($perms[$role])) {
      user_role_change_permissions($rid, $perms[$role]);
      devel_set_message(t('Set new permissions on role @role - @perms', array('@role' => $role, '@perms' => print_r($perms[$role], TRUE))), 'ok');
    }
  }
}

/**
 * Set passwords on users.
 */
function ffunctions_devel_set_user_passwords() {
  $accounts = ffunctions_devel_invoke_hook(__FUNCTION__);

  if (!empty($accounts)) {
    foreach ($accounts as $name => $pass) {
      $account = user_load_by_name($name);
      if (!empty($account)) {
        if (user_save($account, array('pass' => $pass))) {
          devel_set_message(t('Set password on @name', array('@name' => $name)), 'ok');
        }
        else {
          devel_set_message(t('Failed setting password on @name', array('@name' => $name)));
        }
      }
    }
  }
}


/** Hook Implementations **/

/**
 * Implements hook_ffunctions_devel_set_user_passwords().
 */
function ffunctions_devel_ffunctions_devel_set_user_passwords() {
  return array(
    'admin' => 'admin',
  );
}

/**
 * Implements hook_ffunctions_devel_change_permissions()/
 */
function ffunctions_devel_ffunctions_devel_change_permissions() {
  // @todo: see hook_modules_installed in case needed here.
  $perms = array(
    'access devel information' => 'access devel information',
    'execute php code' => 'execute php code',
    'switch users' => 'switch users',
  );
  return array(
    'anonymous user' => $perms,
    'authenticated user' => $perms,
  );
}

/**
 * Implements hook_ffunctions_devel_variable_set().
 */
function ffunctions_devel_ffunctions_devel_variable_set() {
  return array(
    'mail_system' => array(
      'default-system' => 'DevelMailLog',
    ),
    'error_level' => ERROR_REPORTING_DISPLAY_SOME,
    'preprocess_css' => FALSE,
    'preprocess_js' => FALSE,
  );
}
